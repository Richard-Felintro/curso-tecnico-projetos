<?xml version="1.0"?>
<doc>
    <assembly>
        <name>eventplus_codefirst</name>
    </assembly>
    <members>
        <member name="M:eventplus_codefirst.Controllers.EventoController.Post(eventplus_codefirst.Domains.Evento)">
            <summary>
            Cadastra um novo Evento
            </summary>
            <param name="eventoCadastrado"></param>
            <returns>O evento criado</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.EventoController.Delete(System.Guid)">
            <summary>
            Busca um Evento que coincide com um IdEvento informado e o deleta
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.EventoController.UpdateById(System.Guid,eventplus_codefirst.Domains.Evento)">
            <summary>
            Busca um Evento que coincide com um IdEvento e o atualiza com os dados da Evento informado
            </summary>
            <param name="id"></param>
            <param name="evento"></param>
            <returns>Evento editado</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.EventoController.GetAll">
            <summary>
            Lista todos os eventos
            </summary>
            <returns>Lista com todos os eventos</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.EventoController.GetById(System.Guid)">
            <summary>
            Buscar um Evento que coincide com um IdEvento informado
            </summary>
            <param name="id"></param>
            <returns>Evento selectionado</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.InstituicaoController.Post(eventplus_codefirst.Domains.Instituicao)">
            <summary>
            Cadastra uma nova instituição
            </summary>
            <param name="instituicao"></param>
            <returns></returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.InstituicaoController.Delete(System.Guid)">
            <summary>
            Busca uma Instituição que coincide com um IdInstituicao informado e o deleta
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.InstituicaoController.UpdateById(System.Guid,eventplus_codefirst.Domains.Instituicao)">
            <summary>
            Busca Instituicao que coincide com um IdInstituicao e a atualiza com os dados da Instituicao informado
            </summary>
            <param name="id"></param>
            <param name="ins"></param>
            <returns>Instituicão editada</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.InstituicaoController.GetAll">
            <summary>
            Lista todas as instituições
            </summary>
            <returns>Lista com todas as instituições</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.InstituicaoController.GetWithEvents">
            <summary>
            Lista todas as instituições incluindo seus eventos
            </summary>
            <returns>Lista de todas as instituições com seus eventos</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.InstituicaoController.GetById(System.Guid)">
            <summary>
            Buscar Instituição que coincide com um Id informado (IdInstituicao)
            </summary>
            <param name="id"></param>
            <returns>Instituição selectionada</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.InstituicaoController.GetByIdWithEvents(System.Guid)">
            <summary>
            Buscar Instituição que coincide com um Id informado (IdInstituicao) incluindo seus eventos
            </summary>
            <param name="id"></param>
            <returns>Instituição selecionada com seus eventos</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.PresencaEventoController.Post(eventplus_codefirst.Domains.PresencaEvento)">
            <summary>
            Cadastra um novo PresencaEvento
            </summary>
            <param name="PresencaEventoCadastrado"></param>
            <returns>O PresencaEvento criada</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.PresencaEventoController.Delete(System.Guid)">
            <summary>
            Busca um PresencaEvento que coincide com um IdPresencaEvento informado e o deleta
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.PresencaEventoController.UpdateById(System.Guid,eventplus_codefirst.Domains.PresencaEvento)">
            <summary>
            Busca um PresencaEvento que coincide com um IdPresencaEvento e o atualiza com os dados da PresencaEvento informado
            </summary>
            <param name="id"></param>
            <param name="PresencaEvento"></param>
            <returns>Presença em evento editada</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.PresencaEventoController.GetAll">
            <summary>
            Lista todos os PresencaEventos
            </summary>
            <returns>Lista com todas as presenças de eventos</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.PresencaEventoController.GetById(System.Guid)">
            <summary>
            Buscar um PresencaEvento que coincide com um IdPresencaEvento informado
            </summary>
            <param name="id"></param>
            <returns>Presença de evento selectionada</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.PresencaEventoController.GetMine(System.Guid)">
            <summary>
            Buscar Todas presencas em evento de um usuário com o IdUsuario que coincide com o id informado
            </summary>
            <param name="id"></param>
            <returns>Lista com as presenças de evento do usuário que coincide com o IdMencionado</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.TipoEventoController.Post(eventplus_codefirst.Domains.TipoEvento)">
            <summary>
            Cadastra um novo TipoUsuario
            </summary>
            <param name="tipoEvento"></param>
            <returns></returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.TipoEventoController.Delete(System.Guid)">
            <summary>
            Busca um tipo de usuário que coincide com o IdTipoUsuario informado e o deleta
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.TipoEventoController.UpdateById(System.Guid,eventplus_codefirst.Domains.TipoEvento)">
            <summary>
            Busca um tipo de usuário que coincide com o IdTipoUsuario informado e o atualiza com os dados do TipoUsuario informado
            </summary>
            <param name="id"></param>
            <param name="ins"></param>
            <returns>O tipo de usuário editado</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.TipoEventoController.GetAll">
            <summary>
            Lista todos os tipos de usuário
            </summary>
            <returns>Lista com todos os tipos de evento</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.TipoEventoController.GetWithEvents">
            <summary>
            Lista todos os tipos de usuário incluindo seus eventos
            </summary>
            <returns>Lista com todos os tipos de evento e seus eventos</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.TipoEventoController.GetById(System.Guid)">
            <summary>
            Busca um tipo de usuário que coincide com o IdTipoUsuario informado
            </summary>
            <param name="id"></param>
            <returns>Tipo de usuário selecionado</returns>
        </member>
        <member name="M:eventplus_codefirst.Controllers.TipoEventoController.GetByIdWithEvents(System.Guid)">
            <summary>
            Busca um tipo de usuário que coincide com um IdTipoUsuario informado incluindo seus eventos
            </summary>
            <param name="id"></param>
            <returns>Tipo de usuário selecionado incluindo seus eventos</returns>
        </member>
        <member name="T:eventplus_codefirst.Migrations.BDv1">
            <inheritdoc />
        </member>
        <member name="M:eventplus_codefirst.Migrations.BDv1.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:eventplus_codefirst.Migrations.BDv1.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:eventplus_codefirst.Migrations.BDv1.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:eventplus_codefirst.Utils.Criptografia.GerarHash(System.String)">
            <summary>
            Gera uma hash a partir da senha
            </summary>
            <param name="senha">Senha a ser criptografada</param>
            <returns>Senha criptografada</returns>
        </member>
        <member name="M:eventplus_codefirst.Utils.Criptografia.CompararHash(System.String,System.String)">
            <summary>
            Verifica se a hash informada pelo usuário coincide com a hash do banco
            </summary>
            <param name="senhaForm"></param>
            <param name="senhaBanco"></param>
            <returns>True se coincidir ou False se não</returns>
        </member>
    </members>
</doc>
